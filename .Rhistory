tmax = 200)
simulate_LV(r1 = 1.0, r2 = 0.3,
a12 = -0.05, a21 = -0.05,
K1 = 100, K2 = 120,
x1 = 50, x2 = 10,
tmax = 200)
simulate_LV(r1 = 1.0, r2 = 0.3,
a12 = -0.05, a21 = -0.05,
K1 = 100, K2 = 120,
x1 = 50, x2 = 10,
tmax = 200)
simulate_LV(r1 = 1.0, r2 = 0.3,
a12 = -1.5, a21 = -0.2,
K1 = 100, K2 = 120,
x1 = 50, x2 = 10,
tmax = 200)
simulate_LV(r1 = 1.0, r2 = 0.3,
a12 = -2.5, a21 = -0.2,
K1 = 100, K2 = 120,
x1 = 50, x2 = 10,
tmax = 200)
simulate_LV(r1 = 0.5, r2 = 0.5,
a12 = -0.2, a21 = -0.2,
K1 = 100, K2 = 100,
x1 = 50, x2 = 50,
tmax = 200)
simulate_LV(r1 = 2.5, r2 = 0.5,
a12 = -0.2, a21 = -0.2,
K1 = 100, K2 = 100,
x1 = 50, x2 = 50,
tmax = 100)
simulate_LV(r1 = 2.5, r2 = 0.1,
a12 = -0.2, a21 = -0.2,
K1 = 100, K2 = 100,
x1 = 50, x2 = 50,
tmax = 100)
simulate_LV(r1 = 1.0, r2 = 0.3,
a12 = -0.2, a21 = -0.2,
K1 = 100, K2 = 120,
x1 = 50, x2 = 10,
tmax = 200)
simulate_LV(r1 = 1.0, r2 = 0.3,
a12 = -0.2, a21 = -0.2,
K1 = 100, K2 = 120,
x1 = 150, x2 = 165,
tmax = 200)
simulate_LV(r1 = 1.0, r2 = 0.3,
a12 = -0.2, a21 = -0.2,
K1 = 100, K2 = 120,
x1 = 110, x2 = 125,
tmax = 200)
library(deSolve)
library(ggplot2)
# Nicholson-Bailey
simulate_NB <- function(L, a, c, d, N, P, tmax) {
params <- c(L=L, a=a, c=c, d=d, N=N, P=P)
state <- c(N=N, P=P)
NB <- function(t, state, params) {
with(as.list(c(state, params)), {
N = (L * N * exp(-a * P)) # / (1 + d * N)
P = c * N * (1 - exp(-a * P))
list(c(N, P))
})
}
times <- seq(0, tmax, by=0.01)
out <- as.data.frame(ode(y = state, times=times, func=NB, parms=params, method="iteration"))
ggplot(out, aes(x = time)) +
geom_line(aes(y = N, color = "N")) +
geom_line(aes(y = P, color = "P")) +
xlab("Time") +
ylab("Population Size") +
scale_color_manual(values = c("N" = "aquamarine3", "P" = "chocolate2"))
}
simulate_NB(L=5.2, a=0.5, c=5.0, d=0.5, N=2, P=3, tmax=0.5)
simulate_NB(L=2.0, a=0.5, c=1.0, d=0.5, N=2, P=3, tmax=0.5)
simulate_NB(L=1.0, a=0.5, c=2.0, d=0.5, N=2, P=3, tmax=0.5)
simulate_NB(L=2.0, a=0.5, c=2.0, d=0.5, N=2, P=3, tmax=0.5)
simulate_NB(L=2.0, a=0.9, c=2.0, d=0.5, N=2, P=3, tmax=0.5)
simulate_NB(L=2.0, a=0.1, c=2.0, d=0.5, N=2, P=3, tmax=0.5)
simulate_NB(L=2.0, a=0.5, c=2.0, d=0.1, N=2, P=3, tmax=0.5)
simulate_NB(L=2.0, a=0.5, c=2.0, d=0.9, N=2, P=3, tmax=0.5)
simulate_NB(L=8.7, a=0.4, c=5.5, d=4.7, N=0.27, P=2.04, tmax=0.5)
simulate_NB(L=8.7, a=0.4, c=5.5, d=4.7, N=0.47, P=2.24, tmax=0.5)
simulate_NB(L=2.0, a=0.068, c=2.35, d=50, N=25, P=5, tmax=0.5)
simulate_NB(L=2.0, a=0.068, c=2.35, d=50, N=22, P=2, tmax=0.5)
simulate_NB(L=2.0, a=0.068, c=2.35, d=50, N=35, P=2, tmax=0.5)
simulate_NB(L=2.0, a=0.068, c=2.35, d=50, N=25, P=75, tmax=0.85)
simulate_NB(L=2.0, a=0.068, c=2.35, d=50, N=25, P=5, tmax=0.5)
simulate_NB(L=2.2, a=0.068, c=2.35, d=50, N=25, P=5, tmax=0.5)
simulate_NB(L=2.0, a=0.068, c=2.585, d=50, N=25, P=5, tmax=0.5)
simulate_NB(L=1.8, a=0.068, c=2.35, d=50, N=25, P=5, tmax=0.5)
simulate_NB(L=2.0, a=0.068, c=2.115, d=50, N=25, P=5, tmax=0.5)
library(deSolve)
library(ggplot2)
# Modelo SIR
simulate_SIR <- function(R0, T, S, I, R, F, IFR, tmax) {
B <- R0 / T
G <- 1.0 / T
params <- c(B=B, G=G, IFR=IFR)
state <- c(S=S, I=I, R=R, F=F, RF=R+F) # recuperados y fatalidades iniciales son cero
SIR <- function(t, state, params) {
with(as.list(c(state, params)), {
dS = -B * S * I
dI = B * S * I - G * I
dR = G * I * (1.0 - IFR) # recuperados
dF = G * I * IFR # fatalidades
dRF = dR + dF # recuperados + fatalidades combinados
list(c(dS, dI, dR, dF, dRF))
})
}
times <- seq(0, tmax, by=0.01)
out <- as.data.frame(ode(y = state, times=times, func=SIR, parms=params))
ggplot(out, aes(x = time)) +
geom_line(aes(y = S, color = "Suceptibles")) +
geom_line(aes(y = I, color = "Infectados")) +
geom_line(aes(y = RF, color = "Recuperados + Fatalidades")) +
geom_line(aes(y = R, color = "Recuperados")) +
geom_line(aes(y = F, color = "Fatalidades")) +
xlab("Time") +
ylab("Population Size") +
scale_color_manual(values = c("Suceptibles" = "turquoise2", "Infectados" = "orangered", "Recuperados"="green3", "Fatalidades"="royalblue", "Recuperados + Fatalidades"="gray53"))
fatalities <- tail(out, 1)
print(fatalities)
}
library(deSolve)
library(ggplot2)
# Modelo SIR
simulate_SIR <- function(R0, T, S, I, R, F, IFR, tmax) {
B <- R0 / T
G <- 1.0 / T
params <- c(B=B, G=G, IFR=IFR)
state <- c(S=S, I=I, R=R, F=F, RF=R+F) # recuperados y fatalidades iniciales son cero
SIR <- function(t, state, params) {
with(as.list(c(state, params)), {
dS = -B * S * I
dI = B * S * I - G * I
dR = G * I * (1.0 - IFR) # recuperados
dF = G * I * IFR # fatalidades
dRF = dR + dF # recuperados + fatalidades combinados
list(c(dS, dI, dR, dF, dRF))
})
}
times <- seq(0, tmax, by=0.01)
out <- as.data.frame(ode(y = state, times=times, func=SIR, parms=params))
ggplot(out, aes(x = time)) +
geom_line(aes(y = S, color = "Suceptibles")) +
geom_line(aes(y = I, color = "Infectados")) +
geom_line(aes(y = RF, color = "Recuperados + Fatalidades")) +
geom_line(aes(y = R, color = "Recuperados")) +
geom_line(aes(y = F, color = "Fatalidades")) +
xlab("Time") +
ylab("Population Size") +
scale_color_manual(values = c("Suceptibles" = "turquoise2", "Infectados" = "orangered", "Recuperados"="green3", "Fatalidades"="royalblue", "Recuperados + Fatalidades"="gray53"))
fatalities <- tail(out, 1)
print(fatalities)
}
simulate_SIR(R0=2.8, T=3.0, S=999999/1000000, I=1.0/1000000, R=0.0, F=0.0, IFR=0.025, tmax=100)
simulate_SIR(R0=2.0, T=3.0, S=999999/1000000, I=1.0/1000000, R=0.0, F=0.0, IFR=0.035, tmax=100)
simulate_SIR(R0=2.0, T=3.0, S=999999/1000000, I=1.0/1000000, R=0.0, F=0.0, IFR=0.035, tmax=100)
simulate_SIR(R0=2.8, T=3.0, S=999999/1000000, I=1.0/1000000, R=0.0, F=0.0, IFR=0.025, tmax=100)
simulate_SIR(R0=2.0, T=3.0, S=999999/1000000, I=1.0/1000000, R=0.0, F=0.0, IFR=0.025, tmax=100)
library(deSolve)
library(ggplot2)
# Modelo SIR
simulate_SIR <- function(R0, T, S, I, R, F, IFR, tmax) {
B <- R0 / T
G <- 1.0 / T
params <- c(B=B, G=G, IFR=IFR)
state <- c(S=S, I=I, R=R, F=F, RF=R+F) # recuperados y fatalidades iniciales son cero
SIR <- function(t, state, params) {
with(as.list(c(state, params)), {
dS = -B * S * I
dI = B * S * I - G * I
dR = G * I * (1.0 - IFR) # recuperados
dF = G * I * IFR # fatalidades
dRF = dR + dF # recuperados + fatalidades combinados
list(c(dS, dI, dR, dF, dRF))
})
}
times <- seq(0, tmax, by=0.01)
out <- as.data.frame(ode(y = state, times=times, func=SIR, parms=params))
fatalities <- tail(out, 1)
print(fatalities)
ggplot(out, aes(x = time)) +
geom_line(aes(y = S, color = "Suceptibles")) +
geom_line(aes(y = I, color = "Infectados")) +
geom_line(aes(y = RF, color = "Recuperados + Fatalidades")) +
geom_line(aes(y = R, color = "Recuperados")) +
geom_line(aes(y = F, color = "Fatalidades")) +
xlab("Time") +
ylab("Population Size") +
scale_color_manual(values = c("Suceptibles" = "turquoise2", "Infectados" = "orangered", "Recuperados"="green3", "Fatalidades"="royalblue", "Recuperados + Fatalidades"="gray53"))
}
simulate_SIR(R0=2.0, T=3.0, S=999999/1000000, I=1.0/1000000, R=0.0, F=0.0, IFR=0.025, tmax=100)
simulate_SIR(R0=2.8, T=3.0, S=999999/1000000, I=1.0/1000000, R=0.0, F=0.0, IFR=0.025, tmax=100)
simulate_SIR(R0=2.0, T=3.0, S=999999/1000000, I=1.0/1000000, R=0.0, F=0.0, IFR=0.035, tmax=100)
setwd("C:/Users/dequi/source/repos/r-bogota-geospatial-analysis")
install.packages("sp")
install.packages("rgdal")
install.packages("raster")
library("sp")
library("rgdal")
library("raster")
LOCALIDADES = readOGR(dsn = ".", layer = "localidades_BOGOTA_DC")
LOCALIDADES = readOGR(dsn = ".", layer = "data/localidades_BOGOTA_DC")
LOCALIDADES = readOGR(dsn = ".", layer = "/data/localidades_BOGOTA_DC")
LOCALIDADES = readOGR(dsn = ".", layer = "/data/localidades_BOGOTA_DC")
LOCALIDADES = readOGR(dsn = "data", layer = "localidades_BOGOTA_DC")
SRTM_30 = raster("data/raster/SRTM_30_BOGOTA_DC_CLIP.tif")
SRTM_30
plot(SRTM_30)
plot(SRTM_30)
cellStats(SRTM_30, sd)
plot(LOCALIDADES)
install.packages("dismo")
install.packages("rgeos")
install.packages("car")
library("sp")
library("rgdal")
library("raster")
library("dismo")
library("rgeos")
library("car")
library("sp")
library("rgdal")
library("raster")
library("dismo")
library("rgeos")
library("car")
LOCALIDADES = readOGR(dsn = "data", layer = "localidades_BOGOTA_DC")
SRTM_30 = raster("data/raster/SRTM_30_BOGOTA_DC_CLIP.tif")
plot(SRTM_30)
dev.off()
plot(SRTM_30)
plot(LOCALIDADES)
plot(SRTM_30)
plot(LOCALIDADES)
LOCALIDADES
LOCALIDADES@data
CENTROIDS = gCentroid(LOCALIDADES, byid=T)
plot(LOCALIDADES)
plot(CENTROIDS, add=T, col = "gold")
plot(CENTROIDS, add=T, col = "mediumseagreen")
plot(CENTROIDS, add=T, col = "firebrick1")
plot(CENTROIDS, add=T, col = "darkviolet")
plot(CENTROIDS, add=T, col = "red")
LOCALIDADES_UTM18 = spTransform(LOCALIDADES, CRSobj="+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
proj4string(LOCALIDADES_UTM18)
LOCALIDADES = readOGR(dsn = "data", layer = "localidades_BOGOTA_DC")
LOCALIDADES_UTM18 = spTransform(LOCALIDADES, CRSobj="+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
CENTROIDS = gCentroid(LOCALIDADES_UTM18, byid=T)
plot(LOCALIDADES)
plot(CENTROIDS, add=T, col = "red")
LOCALIDADES = readOGR(dsn = "data", layer = "localidades_BOGOTA_DC")
LOCALIDADES_UTM18 = spTransform(LOCALIDADES, CRSobj="+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
CENTROIDS = gCentroid(LOCALIDADES_UTM18, byid=T)
plot(LOCALIDADES)
plot(CENTROIDS, add=T, col = "red")
plot(LOCALIDADES_UTM18)
plot(CENTROIDS, add=T, col = "red")
LOCALIDADES = readOGR(dsn = "data", layer = "localidades_BOGOTA_DC")
LOCALIDADES_UTM18 = spTransform(LOCALIDADES, CRSobj="+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
CENTROIDS = gCentroid(LOCALIDADES_UTM18, byid=T)
plot(LOCALIDADES_UTM18)
plot(CENTROIDS, add=T, col = "red")
BUFFERS <- gBuffer(CENTROIDS, width = 5000, byid = TRUE)
plot(BUFFERS)
plot(LOCALIDADES_UTM18)
BUFFERS <- gBuffer(CENTROIDS, width = 1000, byid = TRUE)
plot(BUFFERS)
LOCALIDADES = readOGR(dsn = "data", layer = "localidades_BOGOTA_DC")
LOCALIDADES_UTM18 = spTransform(LOCALIDADES, CRSobj="+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
CENTROIDS = gCentroid(LOCALIDADES_UTM18, byid=T)
plot(LOCALIDADES_UTM18)
plot(CENTROIDS, add=T, col = "red")
plot(LOCALIDADES_UTM18)
BUFFERS <- gBuffer(CENTROIDS, width = 1000, byid = TRUE)
plot(BUFFERS)
BUFFERS <- gBuffer(CENTROIDS, width = 1000, byid = TRUE)
plot(LOCALIDADES_UTM18)
plot(BUFFERS)
LOCALIDADES = readOGR(dsn = "data", layer = "localidades_BOGOTA_DC")
LOCALIDADES_UTM18 = spTransform(LOCALIDADES, CRSobj="+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
CENTROIDS = gCentroid(LOCALIDADES_UTM18, byid=T)
plot(LOCALIDADES_UTM18)
plot(CENTROIDS, add=T, col = "red")
BUFFERS <- gBuffer(CENTROIDS, width = 1000, byid = TRUE)
plot(LOCALIDADES_UTM18)
plot(BUFFERS)
mask = mask(SRTM_30, BUFFERS)
plot(mask)
R_points = data.frame(CENTROIDS)
names(R_points) = c("Long","Lat")
R_points
point.to.extract = SpatialPointsDataFrame(coords = R_points[,c("Long","Lat")], data = R_points, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
SPDF = SpatialPointsDataFrame(coords = R_points[,c("Long","Lat")], data = R_points, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
)
plot(SRTM_30)
plot(SPDF, col="red", add=T)
plot(SPDF, col="red", add=T)
LOCALIDADES = readOGR(dsn = "data", layer = "localidades_BOGOTA_DC")
LOCALIDADES_UTM18 = spTransform(LOCALIDADES, CRSobj="+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
CENTROIDS = gCentroid(LOCALIDADES_UTM18, byid=T)
plot(LOCALIDADES_UTM18)
plot(CENTROIDS, add=T, col = "red")
R_points = data.frame(CENTROIDS)
names(R_points) = c("Long","Lat")
R_points
SPDF = SpatialPointsDataFrame(coords = R_points[,c("Long","Lat")], data = R_points, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
SRTM_30 = raster("data/raster/SRTM_30_BOGOTA_DC_CLIP.tif")
plot(SRTM_30)
plot(SPDF, col="red", add=T)
plot(SRTM_30)
plot(SPDF, col="red", add=T)
SPDF = SpatialPointsDataFrame(coords = R_points[,c("Long","Lat")], data = R_points))
SPDF = SpatialPointsDataFrame(coords = R_points[,c("Long","Lat")], data = R_points)
SRTM_30 = raster("data/raster/SRTM_30_BOGOTA_DC_CLIP.tif")
plot(SRTM_30)
plot(SPDF, col="red", add=T)
SPDF = SpatialPointsDataFrame(coords = R_points[,c("Long","Lat")], data = R_points, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
SRTM_30 = raster("data/raster/SRTM_30_BOGOTA_DC_CLIP.tif")
plot(SRTM_30)
plot(SPDF, col="red", add=T)
BUFFERS <- gBuffer(SPDF, width = 1000, byid = TRUE)
plot(BUFFERS)
mask = mask(SRTM_30, BUFFERS)
plot(mask)
BUFFERS$ID = seq(1, 20, 1)
class(BUFFERS$ID)
BUFFERS
head(BUFFERS)
mask = mask(SRTM_30, BUFFERS)
plot(mask)
#install.packages("sp")
#install.packages("rgdal")
#install.packages("raster")
#install.packages("dismo")
#install.packages("rgeos")
#install.packages("car")
library("sp")
library("rgdal")
library("raster")
library("dismo")
library("rgeos")
library("car")
LOCALIDADES = readOGR(dsn = "data", layer = "localidades_BOGOTA_DC")
LOCALIDADES_UTM18 = spTransform(LOCALIDADES, CRSobj="+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
CENTROIDS = gCentroid(LOCALIDADES_UTM18, byid=T)
plot(LOCALIDADES_UTM18)
plot(CENTROIDS, add=T, col = "red")
R_points = data.frame(CENTROIDS)
names(R_points) = c("Long","Lat")
R_points
SPDF = SpatialPointsDataFrame(coords = R_points[,c("Long","Lat")], data = R_points, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
SRTM_30 = raster("data/raster/SRTM_30_BOGOTA_DC_CLIP.tif")
plot(SRTM_30)
plot(SPDF, col="red", add=T)
BUFFERS <- gBuffer(SPDF, width = 1000, byid = TRUE)
plot(BUFFERS)
BUFFERS$ID = seq(0, 19, 1)
head(BUFFERS)
mask = mask(SRTM_30, BUFFERS)
plot(mask)
values = getValues(mask)
sd = sd(values,na.rm = TRUE)
sd
values = getValues(mask
values = getValues(mask)
values = getValues(mask)
values
BUFFERS <- gBuffer(SPDF, width = 0.01, byid = TRUE)
plot(BUFFERS)
BUFFERS$ID = seq(0, 19, 1)
head(BUFFERS)
mask = mask(SRTM_30, BUFFERS)
plot(mask)
BUFFERS <- gBuffer(SPDF, width = 10, byid = TRUE)
plot(BUFFERS)
BUFFERS$ID = seq(0, 19, 1)
head(BUFFERS)
mask = mask(SRTM_30, BUFFERS)
plot(mask)
BUFFERS <- gBuffer(SPDF, width = 10, byid = TRUE)
plot(BUFFERS)
BUFFERS <- gBuffer(SPDF, width = 1000, byid = TRUE)
plot(BUFFERS)
BUFFERS$ID = seq(0, 19, 1)
CENTROIDS
R_points = data.frame(CENTROIDS)
R_points
CENTROIDS = gCentroid(LOCALIDADES, byid=T)
plot(CENTROIDS, add=T, col = "red")
R_points = data.frame(CENTROIDS)
names(R_points) = c("Long","Lat")
R_points
SPDF = SpatialPointsDataFrame(coords = R_points[,c("Long","Lat")], data = R_points, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
SRTM_30 = raster("data/raster/SRTM_30_BOGOTA_DC_CLIP.tif")
plot(SRTM_30)
R_points = data.frame(CENTROIDS)
plot(SPDF, col="red", add=T)
LOCALIDADES = readOGR(dsn = "data", layer = "localidades_BOGOTA_DC")
CENTROIDS = gCentroid(LOCALIDADES, byid=T)
plot(LOCALIDADES_UTM18)
plot(CENTROIDS, add=T, col = "red")
R_points = data.frame(CENTROIDS)
names(R_points) = c("Long","Lat")
R_points
SPDF = SpatialPointsDataFrame(coords = R_points[,c("Long","Lat")], data = R_points, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
SRTM_30 = raster("data/raster/SRTM_30_BOGOTA_DC_CLIP.tif")
plot(SRTM_30)
plot(SPDF, col="red", add=T)
BUFFERS <- gBuffer(SPDF, width = 1000, byid = TRUE)
plot(BUFFERS)
BUFFERS$ID = seq(0, 19, 1)
head(BUFFERS)
mask = mask(SRTM_30, BUFFERS)
plot(mask)
values = getValues(mask)
sd = sd(values, na.rm = TRUE)
sd
mask = mask(SRTM_30, BUFFERS)
plot(mask)
head(BUFFERS)
mask = mask(SRTM_30, BUFFERS)
plot(mask)
values = getValues(mask)
sd = sd(values, na.rm = TRUE)
sd
results = vector()
for(i in 1:19){
SUBSET_i = subset(BUFFERS, ID==i)
mask_i = mask(SRTM_30, SUBSET_i)
values_i = getValues(mask_i)
sd_i = sd(values_i, na.rm = TRUE)
results[i]=c(sd_i)
}
results
for(i in 1:19){
SUBSET_i = subset(BUFFERS, ID==i)
SUBSET_i
mask_i = mask(SRTM_30, SUBSET_i)
values_i = getValues(mask_i)
sd_i = sd(values_i, na.rm = TRUE)
results[i]=c(sd_i)
}
results = vector()
for(i in 1:19){
SUBSET_i = subset(BUFFERS, ID==i)
SUBSET_i
mask_i = mask(SRTM_30, SUBSET_i)
values_i = getValues(mask_i)
sd_i = sd(values_i, na.rm = TRUE)
results[i] = c(sd_i)
}
results
for(i in 0:19){
SUBSET_i = subset(BUFFERS, ID==i)
SUBSET_i
mask_i = mask(SRTM_30, SUBSET_i)
values_i = getValues(mask_i)
sd_i = sd(values_i, na.rm = TRUE)
results[i] = c(sd_i)
}
results
SUBSET_i = subset(BUFFERS, ID==0)
SUBSET_i
SUBSET_i = subset(BUFFERS, ID==1)
SUBSET_i
SUBSET_i = subset(BUFFERS, ID==1)
SUBSET_i
#install.packages("sp")
#install.packages("rgdal")
#install.packages("raster")
#install.packages("dismo")
#install.packages("rgeos")
#install.packages("car")
library("sp")
library("rgdal")
library("raster")
library("dismo")
library("rgeos")
library("car")
LOCALIDADES = readOGR(dsn = "data", layer = "localidades_BOGOTA_DC")
CENTROIDS = gCentroid(LOCALIDADES, byid=T)
plot(LOCALIDADES_UTM18)
plot(CENTROIDS, add=T, col = "red")
R_points = data.frame(CENTROIDS)
names(R_points) = c("Long","Lat")
R_points
SPDF = SpatialPointsDataFrame(coords = R_points[,c("Long","Lat")], data = R_points, proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
SRTM_30 = raster("data/raster/SRTM_30_BOGOTA_DC_CLIP.tif")
plot(SRTM_30)
plot(SPDF, col="red", add=T)
BUFFERS <- gBuffer(SPDF, width = 1000, byid = TRUE)
plot(BUFFERS)
BUFFERS$ID = seq(0, 19, 1)
head(BUFFERS)
mask = mask(SRTM_30, BUFFERS)
plot(mask)
values = getValues(mask)
sd = sd(values, na.rm = TRUE)
sd
results = vector()
for(i in 0:19){
SUBSET_i = subset(BUFFERS, ID==i)
SUBSET_i
mask_i = mask(SRTM_30, SUBSET_i)
values_i = getValues(mask_i)
sd_i = sd(values_i, na.rm = TRUE)
results[i] = c(sd_i)
}
results
